<?php class StatsController extends StatsAppController {     public function admin_deleteRank()    {        if (!$this->Permissions->can('STATS__ADMIN'))            throw new ForbiddenException();        $this->loadModel('Stats.Staff');        $id = (int)$this->request->param('id');        if ($this->Staff->findById($id) != null)                    $this->Staff->delete($id);                $this->redirect('/admin/stats');            }            public function admin_addRank()            {                if (!$this->Permissions->can('STATS__ADMIN'))                    throw new ForbiddenException();        if ($this->request->is('ajax')) {            $this->autoRender = false;            $this->response->type('json');            $this->loadModel('Stats.Staff');            $name = $this->request->data('name');            $color = $this->request->data('color');            $level = $this->request->data('level');            $desc = $this->request->data('desc');            if ($this->Staff->findByName($name) == null) {                $this->Staff->create();                $this->Staff->set(array(                    'name' => $name,                    'color' => $color,                    'level' => $level,                    'description' => $desc                ));                $this->Staff->save();                return $this->sendJSON(['statut' => true, 'msg' => 'Rang enregistré']);            } else {                return $this->sendJSON(['statut' => false, 'msg' => 'Rang déjà existant']);            }        } else {            $this->layout = "admin";        }    }    public function admin_modifyRank()    {        if (!$this->Permissions->can('STATS__ADMIN'))            throw new ForbiddenException();        if ($this->request->is('ajax')) {            $this->autoRender = false;            $this->response->type('json');            $this->loadModel('Stats.Staff');            $id = (int)$this->request->param('id');            $name = $this->request->data('name');            $color = $this->request->data('color');            $level = $this->request->data('level');            $desc = $this->request->data('desc');            $this->Staff->read(null, $id);            $this->Staff->set(array(                'name' => $name,                'color' => $color,                'level' => $level,                'description' => $desc            ));            $this->Staff->save();            return $this->sendJSON(['statut' => true, 'msg' => 'Rang enregistré']);        } else {            $this->layout = "admin";            $id = (int)$this->request->param('id');            $this->loadModel('Stats.Staff');            $rang = $this->Staff->findById($id);            $this->set(compact('rang'));        }    }    public function admin_addStaff()    {        if (!$this->Permissions->can('STATS__ADMIN'))            throw new ForbiddenException();        if ($this->request->is('ajax')) {            $this->autoRender = false;            $this->response->type('json');            $this->loadModel('Stats.Staff');            $this->loadModel('Stats.StaffUser');            $user_id = $this->request->data('user_id');            $rang = $this->request->data('rang');            $desc = $this->request->data('desc');            if ($this->Staff->findById($rang) != null) {                $this->StaffUser->create();                $this->StaffUser->set(array(                    'user_id' => $user_id,                    'staff_id' => $rang,                    'function' => $desc                ));                $this->StaffUser->save();                return $this->sendJSON(['statut' => true, 'msg' => 'Staff enregistré']);            } else {                return $this->sendJSON(['statut' => false, 'msg' => 'Rang inconnu']);            }        } else {            $this->layout = "admin";            $this->loadModel('Stats.Staff');            $staffs = $this->Staff->find('all', array('fields' => array('Staff.id', 'Staff.name')));            if (count($staffs) == 0) {                $this->redirect('/admin/stats/ajouterRang');            }            $this->set(compact('staffs'));        }    }    public function admin_deleteStaff()    {        if (!$this->Permissions->can('STATS__ADMIN'))            throw new ForbiddenException();        $this->loadModel('Stats.StaffUser');        $id = (int)$this->request->param('id');        if ($this->StaffUser->findById($id) != null)            $this->StaffUser->delete($id);        $this->redirect('/admin/stats');    }    public function admin_index()    {        if (!$this->Permissions->can('STATS__ADMIN'))            throw new ForbiddenException();        $this->layout = 'admin';        $this->loadModel('Stats.Staff');        $staffs = $this->Staff->find('all', array('order' => 'Staff.level ASC'));        $this->loadModel('Stats.StaffUser');        $staffsU = $this->StaffUser->find('all');        $staffResult = array();        foreach ($staffsU as $staff) {            foreach ($staffs as $rank)                if ($rank['Staff']['id'] == $staff['StaffUser']['staff_id'])                    $staffResult[$staff['StaffUser']['user_id']]['Staff'] = $rank['Staff'];            foreach ($this->User->find('all') as $user)                if ($user['User']['id'] == $staff['StaffUser']['user_id'])                    $staffResult[$staff['StaffUser']['user_id']]['User'] = $user['User'];            $staffResult[$staff['StaffUser']['user_id']]['StaffUser'] = $staff['StaffUser'];        }        $this->set(compact('staffs', 'staffResult'));    }    public function admin_modifyStaff()    {        if (!$this->Permissions->can('STATS__ADMIN'))            throw new ForbiddenException();        if ($this->request->is('ajax')) {            $this->autoRender = false;            $this->response->type('json');            $this->loadModel('Stats.StaffUser');            $user_id = $this->request->data('user_id');            $desc = $this->request->data('desc');            $id = (int)$this->request->param('id');            $this->StaffUser->read(null, $id);            $this->StaffUser->set(array(                'user_id' => $user_id,                'function' => $desc            ));            $this->StaffUser->save();            return $this->sendJSON(['statut' => true, 'msg' => 'Staff enregistré']);        } else {            $this->layout = 'admin';            $id = (int)$this->request->param('id');            $this->loadModel('Stats.StaffUser');            $staffsU = $this->StaffUser->findById($id);            $this->set(compact('staffsU'));        }    }    public function index()    {        $uUsers = array();        foreach ($this->User->find('all', array('fields' => 'User.ip')) as $user)            $uUsers[$user['User']['ip']] = 1;        $uUsers = sizeof($uUsers);        $this->loadModel('Visit');        $count_visits = $this->Visit->getVisitsCount();        $count_visits6 = $this->Visit->getVisitsByDay(date('Y-m-d', strtotime('-6 day')))['count'];        $count_visits5 = $this->Visit->getVisitsByDay(date('Y-m-d', strtotime('-5 day')))['count'];        $count_visits4 = $this->Visit->getVisitsByDay(date('Y-m-d', strtotime('-4 day')))['count'];        $count_visits3 = $this->Visit->getVisitsByDay(date('Y-m-d', strtotime('-3 day')))['count'];        $count_visits2 = $this->Visit->getVisitsByDay(date('Y-m-d', strtotime('-2 day')))['count'];        $count_visits1 = $this->Visit->getVisitsByDay(date('Y-m-d', strtotime('-1 day')))['count'];        $count_visits0 = $this->Visit->getVisitsByDay(date('Y-m-d'))['count'];        $count_register = $this->User->find('count');        $count_register6 = $this->getRegisterByDay(date('Y-m-d', strtotime('-6 day')))['count'];        $count_register5 = $this->getRegisterByDay(date('Y-m-d', strtotime('-5 day')))['count'];        $count_register4 = $this->getRegisterByDay(date('Y-m-d', strtotime('-4 day')))['count'];        $count_register3 = $this->getRegisterByDay(date('Y-m-d', strtotime('-3 day')))['count'];        $count_register2 = $this->getRegisterByDay(date('Y-m-d', strtotime('-2 day')))['count'];        $count_register1 = $this->getRegisterByDay(date('Y-m-d', strtotime('-1 day')))['count'];        $count_register0 = $this->getRegisterByDay(date('Y-m-d'))['count'];        $this->loadModel('News');        $count_news = count($this->News->find('all', array('fields' => 'News.id')));        $this->loadModel('Comment');        $count_comment = count($this->Comment->find('all', array('fields' => 'Comment.id')));        $this->loadModel('Like');        $count_like = count($this->Like->find('all', array('fields' => 'Like.id')));        $this->loadModel('Stats.Staff');        $staffs = $this->Staff->find('all', array('order' => 'Staff.level ASC'));        $this->loadModel('Stats.StaffUser');        $staffsU = $this->StaffUser->find('all');        $staffResult = array();        foreach ($staffsU as $staff) {            foreach ($staffs as $rank)                if ($rank['Staff']['id'] == $staff['StaffUser']['staff_id'])                    $staffResult[$staff['StaffUser']['user_id']]['Staff'] = $rank['Staff'];            $staffResult[$staff['StaffUser']['user_id']]['StaffUser'] = $staff['StaffUser'];        }        $this->set(compact('uUsers', 'date', 'count_news', 'count_comment', 'count_like', 'staffs', 'staffResult',            'count_register6', 'count_register5', 'count_register4', 'count_register3', 'count_register2', 'count_register1', 'count_register0', 'count_register',            'count_visits6', 'count_visits5', 'count_visits4', 'count_visits3', 'count_visits2', 'count_visits1', 'count_visits0', 'count_visits'));    }    private function getRegisterByDay($day)    {        $data = $this->User->find('all', array('conditions' => array('created LIKE' => $day . '%')));        $data['count'] = count($data);        return $data;    }} 